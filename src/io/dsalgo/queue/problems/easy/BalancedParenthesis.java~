package io.dsalgo.queue.problems;

import java.util.Stack;

//20. Valid Parentheses
public class BalancedParenthesis {

    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();

        for(int i = 0 ; i < s.length(); i ++){
            char ch = s.charAt(i);

            if(ch == '(' || ch == '[' ||ch == '{') { // Opening bracket
                st.push(ch);
            } else { // closing braket
                if(st.empty()) return false;

                char topBracket = st.peek();

                if(ch == ')' && topBracket == '('){
                    st.pop();
                } else if(ch == ']' && topBracket == '['){
                    st.pop();
                } else if(ch == '}' && topBracket == '{'){
                    st.pop();
                } else {
                    return false;
                }
            }
        }
        // Every bracket should have its corresponding closing bracket, or else there would exist brackets
        if(!st.empty()) return false;

        return true;
    }
}
